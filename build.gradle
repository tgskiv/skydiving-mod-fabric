plugins {
	id 'fabric-loom' version '1.7.1'
	id 'maven-publish'
}

//version = project.mod_version
group = project.maven_group

def props = new Properties()
file("version.properties").withInputStream { props.load(it) }

def baseVersion = project.mod_version // comes from gradle.properties
def patch = props.getProperty("patch").toInteger() + 1
def fullVersion = "${baseVersion}.${patch}"

version = fullVersion


base {
	archivesName = project.archives_base_name
}


repositories {
	// Add repositories to retrieve artifacts from in here.
	// You should only use this when depending on other mods because
	// Loom adds the essential maven repositories to download Minecraft and libraries from automatically.
	// See https://docs.gradle.org/current/userguide/declaring_repositories.html
	// for more information about repositories.


	maven {
		name = "Terraformers"
		url = "https://maven.terraformersmc.com/"
	}

	maven { url "https://maven.shedaniel.me/" }
	maven { url "https://maven.terraformersmc.com/releases/" }
}

loom {
    splitEnvironmentSourceSets()

	mods {
		"skydivingmod" {
			sourceSet sourceSets.main
			sourceSet sourceSets.client
		}
	}

}

dependencies {
	// To change the versions see the gradle.properties file
	minecraft "com.mojang:minecraft:${project.minecraft_version}"
	mappings "net.fabricmc:yarn:${project.yarn_mappings}:v2"
	modImplementation "net.fabricmc:fabric-loader:${project.loader_version}"

	// Fabric API. This is technically optional, but you probably want it anyway.
	modImplementation "net.fabricmc.fabric-api:fabric-api:${project.fabric_version}"


	modImplementation("com.terraformersmc:modmenu:${project.modmenu_version}")

	modApi("me.shedaniel.cloth:cloth-config-fabric:${project.cloth_config_version}") {
		exclude(group: "net.fabricmc.fabric-api")
	}
	modApi "me.shedaniel:RoughlyEnoughItems-fabric:${project.roughly_enough_version}"
}



processResources {
	inputs.property "version", project.version

	filesMatching("fabric.mod.json") {
		expand "version": project.version
	}
}

tasks.withType(JavaCompile).configureEach {
	it.options.release = 17
}

java {
	// Loom will automatically attach sourcesJar to a RemapSourcesJar task and to the "build" task
	// if it is present.
	// If you remove this line, sources will not be generated.
	withSourcesJar()

	sourceCompatibility = JavaVersion.VERSION_17
	targetCompatibility = JavaVersion.VERSION_17
}

jar {
	from("LICENSE") {
		rename { "${it}_${project.base.archivesName.get()}"}
	}
}

// configure the maven publication
publishing {
	publications {
		create("mavenJava", MavenPublication) {
			artifactId = project.archives_base_name
			from components.java
		}
	}

	// See https://docs.gradle.org/current/userguide/publishing_maven.html for information on how to set up publishing.
	repositories {
		// Add repositories to publish to here.
		// Notice: This block does NOT have the same function as the block in the top level.
		// The repositories here will be used for publishing your artifact, not for
		// retrieving dependencies.
	}
}

tasks.register('buildAndCopy') {
	dependsOn build
	doLast {
		def modsDir = file('c:/Games/minecraft-1.21.1/mods')
		def libsDir = file("$buildDir/libs")

		// Clean up old mod jars
		modsDir.listFiles(new FilenameFilter() {
			boolean accept(File dir, String name) {
				return name.startsWith('skydivingmod') && name.endsWith('.jar') && !name.contains('-sources')
			}
		})?.each { it.delete() }

		// Only copy the newly built JAR (matching the full version)
		def jarName = "skydivingmod-${project.version}.jar"
		def builtJar = new File(libsDir, jarName)

		if (builtJar.exists()) {
			copy {
				from libsDir
				include jarName
				into modsDir
			}
		} else {
			println "Expected JAR not found: $jarName"
		}
	}
}

gradle.buildFinished {
	props.setProperty("patch", fullVersion.tokenize('.').last()) // store only the patch number
	file("version.properties").withOutputStream { props.store(it, null) }
}